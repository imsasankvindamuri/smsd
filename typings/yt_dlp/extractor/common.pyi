from ..compat import compat_etree_fromstring as compat_etree_fromstring, compat_expanduser as compat_expanduser, urllib_req_to_req as urllib_req_to_req
from ..cookies import LenientSimpleCookie as LenientSimpleCookie
from ..downloader.f4m import get_base_url as get_base_url, remove_encrypted_media as remove_encrypted_media
from ..downloader.hls import HlsFD as HlsFD
from ..globals import plugin_ies_overrides as plugin_ies_overrides
from ..networking import HEADRequest as HEADRequest, Request as Request
from ..networking.exceptions import HTTPError as HTTPError, IncompleteRead as IncompleteRead, TransportError as TransportError, network_exceptions as network_exceptions
from ..networking.impersonate import ImpersonateTarget as ImpersonateTarget
from ..utils import ExtractorError as ExtractorError, FormatSorter as FormatSorter, GeoRestrictedError as GeoRestrictedError, GeoUtils as GeoUtils, IDENTITY as IDENTITY, ISO639Utils as ISO639Utils, JSON_LD_RE as JSON_LD_RE, LenientJSONDecoder as LenientJSONDecoder, NO_DEFAULT as NO_DEFAULT, Popen as Popen, RegexNotFoundError as RegexNotFoundError, RetryManager as RetryManager, UnsupportedError as UnsupportedError, age_restricted as age_restricted, base_url as base_url, bug_reports_message as bug_reports_message, classproperty as classproperty, clean_html as clean_html, deprecation_warning as deprecation_warning, determine_ext as determine_ext, dict_get as dict_get, encode_data_uri as encode_data_uri, extract_attributes as extract_attributes, filter_dict as filter_dict, fix_xml_ampersands as fix_xml_ampersands, float_or_none as float_or_none, format_field as format_field, int_or_none as int_or_none, join_nonempty as join_nonempty, js_to_json as js_to_json, mimetype2ext as mimetype2ext, netrc_from_content as netrc_from_content, orderedSet as orderedSet, parse_bitrate as parse_bitrate, parse_codecs as parse_codecs, parse_duration as parse_duration, parse_iso8601 as parse_iso8601, parse_m3u8_attributes as parse_m3u8_attributes, parse_resolution as parse_resolution, qualities as qualities, sanitize_url as sanitize_url, smuggle_url as smuggle_url, str_or_none as str_or_none, str_to_int as str_to_int, strip_or_none as strip_or_none, traverse_obj as traverse_obj, truncate_string as truncate_string, try_call as try_call, try_get as try_get, unescapeHTML as unescapeHTML, unified_strdate as unified_strdate, unified_timestamp as unified_timestamp, url_basename as url_basename, url_or_none as url_or_none, urlhandle_detect_ext as urlhandle_detect_ext, urljoin as urljoin, variadic as variadic, xpath_element as xpath_element, xpath_text as xpath_text, xpath_with_ns as xpath_with_ns
from ..utils.jslib import devalue as devalue
from _typeshed import Incomplete
from collections.abc import Generator

class InfoExtractor:
    IE_DESC: Incomplete
    SEARCH_KEY: Incomplete
    def __init__(self, downloader=None) -> None: ...
    @classmethod
    def suitable(cls, url): ...
    @classmethod
    def get_temp_id(cls, url): ...
    @classmethod
    def working(cls): ...
    @classmethod
    def supports_login(cls): ...
    def initialize(self) -> None: ...
    def extract(self, url): ...
    def set_downloader(self, downloader) -> None: ...
    @property
    def cache(self): ...
    @property
    def cookiejar(self): ...
    @classmethod
    def ie_key(cls): ...
    @classproperty
    def IE_NAME(cls): ...
    def report_warning(self, msg, video_id=None, *args, only_once: bool = False, **kwargs) -> None: ...
    def to_screen(self, msg, *args, **kwargs) -> None: ...
    def write_debug(self, msg, *args, **kwargs) -> None: ...
    def get_param(self, name, default=None, *args, **kwargs): ...
    def report_drm(self, video_id, partial=...) -> None: ...
    def report_extraction(self, id_or_name) -> None: ...
    def report_download_webpage(self, video_id) -> None: ...
    def report_age_confirmation(self) -> None: ...
    def report_login(self) -> None: ...
    def raise_login_required(self, msg: str = 'This video is only available for registered users', metadata_available: bool = False, method=...) -> None: ...
    def raise_geo_restricted(self, msg: str = 'This video is not available from your location due to geo restriction', countries=None, metadata_available: bool = False) -> None: ...
    def raise_no_formats(self, msg, expected: bool = False, video_id=None) -> None: ...
    @staticmethod
    def url_result(url, ie=None, video_id=None, video_title=None, *, url_transparent: bool = False, **kwargs): ...
    @classmethod
    def playlist_from_matches(cls, matches, playlist_id=None, playlist_title=None, getter=..., ie=None, video_kwargs=None, **kwargs): ...
    @staticmethod
    def playlist_result(entries, playlist_id=None, playlist_title=None, playlist_description=None, *, multi_video: bool = False, **kwargs): ...
    def FormatSort(cls): ...
    def http_scheme(self): ...
    @classmethod
    def get_testcases(cls, include_onlymatching: bool = False) -> Generator[Incomplete, Incomplete]: ...
    @classmethod
    def get_webpage_testcases(cls) -> Generator[Incomplete, Incomplete]: ...
    def age_limit(cls): ...
    @classmethod
    def is_single_video(cls, url): ...
    @classmethod
    def is_suitable(cls, age_limit): ...
    @classmethod
    def description(cls, *, markdown: bool = True, search_examples=None): ...
    def extract_subtitles(self, *args, **kwargs): ...
    class CommentsDisabled(Exception): ...
    def extract_comments(self, *args, **kwargs): ...
    def extract_automatic_captions(self, *args, **kwargs): ...
    def mark_watched(self, *args, **kwargs) -> None: ...
    def geo_verification_headers(self): ...
    def RetryManager(self, **kwargs): ...
    @classmethod
    def extract_from_webpage(cls, ydl, url, webpage) -> Generator[Incomplete]: ...
    class StopExtraction(Exception): ...
    @classmethod
    def __init_subclass__(cls, *, plugin_name=None, **kwargs): ...

class SearchInfoExtractor(InfoExtractor):
    @classproperty
    def SEARCH_KEY(cls): ...

class UnsupportedURLIE(InfoExtractor):
    IE_DESC: bool
