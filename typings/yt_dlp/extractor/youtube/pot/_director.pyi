from _typeshed import Incomplete
from collections.abc import Iterable
from yt_dlp.extractor.youtube.pot._provider import BuiltinIEContentProvider as BuiltinIEContentProvider, IEContentProvider as IEContentProvider, IEContentProviderLogger as IEContentProviderLogger
from yt_dlp.extractor.youtube.pot.cache import CacheProviderPreference as CacheProviderPreference, CacheProviderWritePolicy as CacheProviderWritePolicy, PoTokenCacheProvider as PoTokenCacheProvider, PoTokenCacheProviderError as PoTokenCacheProviderError, PoTokenCacheSpec as PoTokenCacheSpec, PoTokenCacheSpecProvider as PoTokenCacheSpecProvider
from yt_dlp.extractor.youtube.pot.provider import PoTokenProvider as PoTokenProvider, PoTokenProviderError as PoTokenProviderError, PoTokenProviderRejectedRequest as PoTokenProviderRejectedRequest, PoTokenRequest as PoTokenRequest, PoTokenResponse as PoTokenResponse, Preference as Preference, provider_bug_report_message as provider_bug_report_message
from yt_dlp.utils import bug_reports_message as bug_reports_message, format_field as format_field, join_nonempty as join_nonempty

class YoutubeIEContentProviderLogger(IEContentProviderLogger):
    prefix: Incomplete
    log_level: Incomplete
    def __init__(self, ie, prefix, log_level: IEContentProviderLogger.LogLevel | None = None) -> None: ...
    def trace(self, message: str): ...
    def debug(self, message: str): ...
    def info(self, message: str): ...
    def warning(self, message: str, *, once: bool = False): ...
    def error(self, message: str): ...

class PoTokenCache:
    cache_providers: dict[str, PoTokenCacheProvider]
    cache_provider_preferences: list[CacheProviderPreference]
    cache_spec_providers: dict[str, PoTokenCacheSpecProvider]
    logger: Incomplete
    def __init__(self, logger: IEContentProviderLogger, cache_providers: list[PoTokenCacheProvider], cache_spec_providers: list[PoTokenCacheSpecProvider], cache_provider_preferences: list[CacheProviderPreference] | None = None) -> None: ...
    def get(self, request: PoTokenRequest) -> PoTokenResponse | None: ...
    def store(self, request: PoTokenRequest, response: PoTokenResponse, write_policy: CacheProviderWritePolicy | None = None): ...
    def close(self) -> None: ...

class PoTokenRequestDirector:
    providers: dict[str, PoTokenProvider]
    preferences: list[Preference]
    cache: Incomplete
    logger: Incomplete
    def __init__(self, logger: IEContentProviderLogger, cache: PoTokenCache) -> None: ...
    def register_provider(self, provider: PoTokenProvider): ...
    def register_preference(self, preference: Preference): ...
    def get_po_token(self, request: PoTokenRequest) -> str | None: ...
    def close(self) -> None: ...

EXTRACTOR_ARG_PREFIX: str

def initialize_pot_director(ie): ...
def provider_display_list(providers: Iterable[IEContentProvider]): ...
def clean_pot(po_token: str): ...
def validate_response(response: PoTokenResponse | None): ...
def validate_cache_spec(spec: PoTokenCacheSpec): ...
