import typing
from threading import Lock
from yt_dlp.extractor.youtube.pot._provider import BuiltinIEContentProvider as BuiltinIEContentProvider
from yt_dlp.extractor.youtube.pot.cache import PoTokenCacheProvider as PoTokenCacheProvider, register_preference as register_preference, register_provider as register_provider

def initialize_global_cache(max_size: int): ...

class MemoryLRUPCP(PoTokenCacheProvider, BuiltinIEContentProvider):
    PROVIDER_NAME: str
    DEFAULT_CACHE_SIZE: int
    def __init__(self, *args, initialize_cache: typing.Callable[[int], tuple[dict[str, tuple[str, int]], Lock, int]] = ..., **kwargs) -> None: ...
    def is_available(self) -> bool: ...
    def get(self, key: str) -> str | None: ...
    def store(self, key: str, value: str, expires_at: int): ...
    def delete(self, key: str): ...

def memorylru_preference(*_, **__): ...
