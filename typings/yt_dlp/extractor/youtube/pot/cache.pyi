import abc
import dataclasses
import enum
import typing
from yt_dlp.extractor.youtube.pot._provider import IEContentProvider as IEContentProvider, IEContentProviderError as IEContentProviderError, register_preference_generic as register_preference_generic, register_provider_generic as register_provider_generic
from yt_dlp.extractor.youtube.pot.provider import PoTokenRequest as PoTokenRequest

class PoTokenCacheProviderError(IEContentProviderError): ...

class PoTokenCacheProvider(IEContentProvider, abc.ABC, suffix='PCP', metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get(self, key: str) -> str | None: ...
    @abc.abstractmethod
    def store(self, key: str, value: str, expires_at: int): ...
    @abc.abstractmethod
    def delete(self, key: str): ...

class CacheProviderWritePolicy(enum.Enum):
    WRITE_ALL = ...
    WRITE_FIRST = ...

@dataclasses.dataclass
class PoTokenCacheSpec:
    key_bindings: dict[str, str | None]
    default_ttl: int
    write_policy: CacheProviderWritePolicy = ...

class PoTokenCacheSpecProvider(IEContentProvider, abc.ABC, suffix='PCSP', metaclass=abc.ABCMeta):
    def is_available(self) -> bool: ...
    @abc.abstractmethod
    def generate_cache_spec(self, request: PoTokenRequest) -> PoTokenCacheSpec | None: ...

def register_provider(provider: type[PoTokenCacheProvider]): ...
def register_spec(provider: type[PoTokenCacheSpecProvider]): ...
def register_preference(*providers: type[PoTokenCacheProvider]) -> typing.Callable[[CacheProviderPreference], CacheProviderPreference]: ...
CacheProviderPreference = typing.Callable[[PoTokenCacheProvider, PoTokenRequest], int]
