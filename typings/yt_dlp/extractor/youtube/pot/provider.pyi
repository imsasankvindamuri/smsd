import abc
import dataclasses
import enum
import typing
from yt_dlp.cookies import YoutubeDLCookieJar
from yt_dlp.extractor.youtube.pot._provider import IEContentProvider, IEContentProviderError
from yt_dlp.utils.networking import HTTPHeaderDict

__all__ = ['ExternalRequestFeature', 'PoTokenContext', 'PoTokenProvider', 'PoTokenProviderError', 'PoTokenProviderRejectedRequest', 'PoTokenRequest', 'PoTokenResponse', 'provider_bug_report_message', 'register_preference', 'register_provider']

class PoTokenContext(enum.Enum):
    GVS = 'gvs'
    PLAYER = 'player'
    SUBS = 'subs'

@dataclasses.dataclass
class PoTokenRequest:
    context: PoTokenContext
    innertube_context: InnertubeContext
    innertube_host: str | None = ...
    session_index: str | None = ...
    player_url: str | None = ...
    is_authenticated: bool = ...
    video_webpage: str | None = ...
    internal_client_name: str | None = ...
    visitor_data: str | None = ...
    data_sync_id: str | None = ...
    video_id: str | None = ...
    request_cookiejar: YoutubeDLCookieJar = dataclasses.field(default_factory=YoutubeDLCookieJar)
    request_proxy: str | None = ...
    request_headers: HTTPHeaderDict = dataclasses.field(default_factory=HTTPHeaderDict)
    request_timeout: float | None = ...
    request_source_address: str | None = ...
    request_verify_tls: bool = ...
    bypass_cache: bool = ...
    def copy(self): ...

@dataclasses.dataclass
class PoTokenResponse:
    po_token: str
    expires_at: int | None = ...

class PoTokenProviderRejectedRequest(IEContentProviderError): ...
class PoTokenProviderError(IEContentProviderError): ...

class ExternalRequestFeature(enum.Enum):
    PROXY_SCHEME_HTTP = ...
    PROXY_SCHEME_HTTPS = ...
    PROXY_SCHEME_SOCKS4 = ...
    PROXY_SCHEME_SOCKS4A = ...
    PROXY_SCHEME_SOCKS5 = ...
    PROXY_SCHEME_SOCKS5H = ...
    SOURCE_ADDRESS = ...
    DISABLE_TLS_VERIFICATION = ...

class PoTokenProvider(IEContentProvider, abc.ABC, suffix='PTP', metaclass=abc.ABCMeta):
    def request_pot(self, request: PoTokenRequest) -> PoTokenResponse: ...

def register_provider(provider: type[PoTokenProvider]): ...
def provider_bug_report_message(provider: IEContentProvider, before: str = ';'): ...
def register_preference(*providers: type[PoTokenProvider]) -> typing.Callable[[Preference], Preference]: ...
Preference = typing.Callable[[PoTokenProvider, PoTokenRequest], int]

class ClientInfo(typing.TypedDict, total=False):
    hl: str | None
    gl: str | None
    remoteHost: str | None
    deviceMake: str | None
    deviceModel: str | None
    visitorData: str | None
    userAgent: str | None
    clientName: str
    clientVersion: str
    osName: str | None
    osVersion: str | None

class InnertubeContext(typing.TypedDict, total=False):
    client: ClientInfo
    request: dict
    user: dict
