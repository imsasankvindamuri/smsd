import logging
import re
import requests as requests
import requests.adapters
import urllib3 as urllib3
import urllib3.connection
from ..dependencies import brotli as brotli
from ..utils import bug_reports_message as bug_reports_message, int_or_none as int_or_none, variadic as variadic
from ..utils.networking import normalize_url as normalize_url, select_proxy as select_proxy
from ._helper import InstanceStoreMixin as InstanceStoreMixin, add_accept_encoding_header as add_accept_encoding_header, create_connection as create_connection, create_socks_proxy_socket as create_socks_proxy_socket, get_redirect_method as get_redirect_method, make_socks_proxy_opts as make_socks_proxy_opts
from .common import Features as Features, RequestHandler as RequestHandler, Response as Response, register_preference as register_preference, register_rh as register_rh
from .exceptions import CertificateVerifyError as CertificateVerifyError, HTTPError as HTTPError, IncompleteRead as IncompleteRead, ProxyError as ProxyError, RequestError as RequestError, SSLError as SSLError, TransportError as TransportError
from _typeshed import Incomplete

urllib3_version: Incomplete
SUPPORTED_ENCODINGS: Incomplete

class Urllib3PercentREOverride:
    re: Incomplete
    def __init__(self, r: re.Pattern) -> None: ...
    def __getattr__(self, item): ...
    def subn(self, repl, string, *args, **kwargs): ...

class RequestsResponseAdapter(Response):
    def __init__(self, res: requests.models.Response) -> None: ...
    def read(self, amt: int | None = None): ...

class RequestsHTTPAdapter(requests.adapters.HTTPAdapter):
    def __init__(self, ssl_context=None, proxy_ssl_context=None, source_address=None, **kwargs) -> None: ...
    def init_poolmanager(self, *args, **kwargs): ...
    def proxy_manager_for(self, proxy, **proxy_kwargs): ...
    def cert_verify(*args, **kwargs) -> None: ...
    def get_connection_with_tls_context(self, request, verify, proxies=None, cert=None): ...

class RequestsSession(requests.sessions.Session):
    def rebuild_method(self, prepared_request, response) -> None: ...
    def rebuild_auth(self, prepared_request, response): ...

class Urllib3LoggingFilter(logging.Filter):
    def filter(self, record): ...

class Urllib3LoggingHandler(logging.Handler):
    def __init__(self, logger, *args, **kwargs) -> None: ...
    def emit(self, record) -> None: ...

class RequestsRH(RequestHandler, InstanceStoreMixin):
    RH_NAME: str
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> None: ...

def requests_preference(rh, request): ...

class SocksHTTPConnection(urllib3.connection.HTTPConnection):
    def __init__(self, _socks_options, *args, **kwargs) -> None: ...

class SocksHTTPSConnection(SocksHTTPConnection, urllib3.connection.HTTPSConnection): ...

class SocksHTTPConnectionPool(urllib3.HTTPConnectionPool):
    ConnectionCls = SocksHTTPConnection

class SocksHTTPSConnectionPool(urllib3.HTTPSConnectionPool):
    ConnectionCls = SocksHTTPSConnection

class SocksProxyManager(urllib3.PoolManager):
    pool_classes_by_scheme: Incomplete
    def __init__(self, socks_proxy, username=None, password=None, num_pools: int = 10, headers=None, **connection_pool_kw) -> None: ...
