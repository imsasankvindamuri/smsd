import ssl
from ..dependencies import certifi as certifi
from ..socks import ProxyType as ProxyType, sockssocket as sockssocket
from ..utils.networking import HTTPHeaderDict as HTTPHeaderDict
from .exceptions import RequestError as RequestError
from collections.abc import Iterable

def ssl_load_certs(context: ssl.SSLContext, use_certifi: bool = True): ...
def ssl_load_windows_store_certs(ssl_context, storename) -> None: ...
def make_socks_proxy_opts(socks_proxy): ...
def get_redirect_method(method, status): ...
def make_ssl_context(verify: bool = True, client_certificate=None, client_certificate_key=None, client_certificate_password=None, legacy_support: bool = False, use_certifi: bool = True): ...

class InstanceStoreMixin:
    def __init__(self, **kwargs) -> None: ...

def add_accept_encoding_header(headers: HTTPHeaderDict, supported_encodings: Iterable[str]): ...
def wrap_request_errors(func): ...
def create_socks_proxy_socket(dest_addr, proxy_args, proxy_ip_addr, timeout, source_address): ...
def create_connection(address, timeout=..., source_address=None, *, _create_socket_func=...): ...
