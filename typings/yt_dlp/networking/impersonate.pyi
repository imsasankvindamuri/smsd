import abc
from ..compat.types import NoneType as NoneType
from ..utils import classproperty as classproperty, join_nonempty as join_nonempty
from ..utils.networking import HTTPHeaderDict as HTTPHeaderDict, std_headers as std_headers
from .common import Request as Request, RequestHandler as RequestHandler, register_preference as register_preference
from .exceptions import UnsupportedRequest as UnsupportedRequest
from _typeshed import Incomplete
from abc import ABC
from dataclasses import dataclass

@dataclass(order=True, frozen=True)
class ImpersonateTarget:
    client: str | None = ...
    version: str | None = ...
    os: str | None = ...
    os_version: str | None = ...
    def __post_init__(self) -> None: ...
    def __contains__(self, target: ImpersonateTarget): ...
    @classmethod
    def from_str(cls, target: str): ...

class ImpersonateRequestHandler(RequestHandler, ABC, metaclass=abc.ABCMeta):
    impersonate: Incomplete
    def __init__(self, *, impersonate: ImpersonateTarget = None, **kwargs) -> None: ...
    @classproperty
    def supported_targets(cls) -> tuple[ImpersonateTarget, ...]: ...
    def is_supported_target(self, target: ImpersonateTarget): ...

def impersonate_preference(rh, request): ...
