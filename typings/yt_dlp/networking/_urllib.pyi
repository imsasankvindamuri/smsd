import http.client
import ssl
import urllib.request
import urllib.response
from ..dependencies import brotli as brotli
from ..utils import update_url_query as update_url_query
from ..utils.networking import normalize_url as normalize_url, select_proxy as select_proxy
from ._helper import InstanceStoreMixin as InstanceStoreMixin, add_accept_encoding_header as add_accept_encoding_header, create_connection as create_connection, create_socks_proxy_socket as create_socks_proxy_socket, get_redirect_method as get_redirect_method, make_socks_proxy_opts as make_socks_proxy_opts
from .common import Features as Features, RequestHandler as RequestHandler, Response as Response, register_rh as register_rh
from .exceptions import CertificateVerifyError as CertificateVerifyError, HTTPError as HTTPError, IncompleteRead as IncompleteRead, ProxyError as ProxyError, RequestError as RequestError, SSLError as SSLError, TransportError as TransportError
from _typeshed import Incomplete

SUPPORTED_ENCODINGS: Incomplete
CONTENT_DECODE_ERRORS: Incomplete

class HTTPHandler(urllib.request.AbstractHTTPHandler):
    def __init__(self, context=None, source_address=None, *args, **kwargs) -> None: ...
    def http_open(self, req): ...
    def https_open(self, req): ...
    @staticmethod
    def deflate(data): ...
    @staticmethod
    def brotli(data): ...
    @staticmethod
    def gz(data): ...
    def http_request(self, req): ...
    def http_response(self, req, resp): ...
    https_request = http_request
    https_response = http_response

def make_socks_conn_class(base_class, socks_proxy): ...

class RedirectHandler(urllib.request.HTTPRedirectHandler):
    http_error_301: Incomplete
    http_error_303: Incomplete
    http_error_307: Incomplete
    http_error_308: Incomplete
    def redirect_request(self, req, fp, code, msg, headers, newurl): ...

class ProxyHandler(urllib.request.BaseHandler):
    handler_order: int
    proxies: Incomplete
    def __init__(self, proxies=None) -> None: ...
    def proxy_open(self, req): ...

class PUTRequest(urllib.request.Request):
    def get_method(self): ...

class HEADRequest(urllib.request.Request):
    def get_method(self): ...

def update_Request(req, url=None, data=None, headers=None, query=None): ...

class UrllibResponseAdapter(Response):
    def __init__(self, res: http.client.HTTPResponse | urllib.response.addinfourl) -> None: ...
    def read(self, amt=None): ...

def handle_sslerror(e: ssl.SSLError): ...
def handle_response_read_exceptions(e) -> None: ...

class UrllibRH(RequestHandler, InstanceStoreMixin):
    RH_NAME: str
    enable_file_urls: Incomplete
    def __init__(self, *, enable_file_urls: bool = False, **kwargs) -> None: ...
