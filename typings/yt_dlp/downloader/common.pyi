from ..minicurses import BreaklineStatusPrinter as BreaklineStatusPrinter, MultilineLogger as MultilineLogger, MultilinePrinter as MultilinePrinter, QuietMultilinePrinter as QuietMultilinePrinter
from ..utils import IDENTITY as IDENTITY, LockingUnsupportedError as LockingUnsupportedError, NO_DEFAULT as NO_DEFAULT, Namespace as Namespace, RetryManager as RetryManager, classproperty as classproperty, deprecation_warning as deprecation_warning, format_bytes as format_bytes, join_nonempty as join_nonempty, parse_bytes as parse_bytes, remove_start as remove_start, sanitize_open as sanitize_open, shell_quote as shell_quote, timeconvert as timeconvert, timetuple_from_msec as timetuple_from_msec, try_call as try_call
from _typeshed import Incomplete

class FileDownloader:
    params: Incomplete
    def __init__(self, ydl, params) -> None: ...
    def to_screen(self, *args, **kargs) -> None: ...
    @classproperty
    def FD_NAME(cls): ...
    @staticmethod
    def format_seconds(seconds): ...
    @classmethod
    def format_eta(cls, seconds): ...
    @staticmethod
    def calc_percent(byte_counter, data_len): ...
    @staticmethod
    def format_percent(percent): ...
    @classmethod
    def calc_eta(cls, start_or_rate, now_or_remaining, total=..., current=...): ...
    @staticmethod
    def calc_speed(start, now, bytes): ...
    @staticmethod
    def format_speed(speed): ...
    @staticmethod
    def format_retries(retries): ...
    @staticmethod
    def filesize_or_none(unencoded_filename): ...
    @staticmethod
    def best_block_size(elapsed_time, bytes): ...
    @staticmethod
    def parse_bytes(bytestr): ...
    def slow_down(self, start_time, now, byte_counter) -> None: ...
    def temp_name(self, filename): ...
    def undo_temp_name(self, filename): ...
    def ytdl_filename(self, filename): ...
    def wrap_file_access(action, *, fatal: bool = False): ...
    def sanitize_open(self, filename, open_mode): ...
    def try_remove(self, filename) -> None: ...
    def try_rename(self, old_filename, new_filename) -> None: ...
    def try_utime(self, filename, last_modified_hdr): ...
    def report_destination(self, filename) -> None: ...
    ProgressStyles: Incomplete
    def report_progress(self, s): ...
    def report_resuming_byte(self, resume_len) -> None: ...
    def report_retry(self, err, count, retries, frag_index=..., fatal: bool = True): ...
    def report_unable_to_resume(self) -> None: ...
    @staticmethod
    def supports_manifest(manifest) -> None: ...
    def download(self, filename, info_dict, subtitle: bool = False): ...
    def real_download(self, filename, info_dict) -> None: ...
    def add_progress_hook(self, ph) -> None: ...
