from ..aes import aes_cbc_decrypt_bytes as aes_cbc_decrypt_bytes, unpad_pkcs7 as unpad_pkcs7
from ..networking import Request as Request
from ..networking.exceptions import HTTPError as HTTPError, IncompleteRead as IncompleteRead
from ..utils import DownloadError as DownloadError, RetryManager as RetryManager, traverse_obj as traverse_obj
from ..utils.networking import HTTPHeaderDict as HTTPHeaderDict
from ..utils.progress import ProgressCalculator as ProgressCalculator
from .common import FileDownloader as FileDownloader
from .http import HttpFD as HttpFD

class HttpQuietDownloader(HttpFD):
    def to_screen(self, *args, **kargs) -> None: ...
    to_console_title = to_screen

class FragmentFD(FileDownloader):
    def report_retry_fragment(self, err, frag_index, count, retries): ...
    def report_skip_fragment(self, frag_index, err=None) -> None: ...
    def decrypter(self, info_dict): ...
    def download_and_append_fragments_multiple(self, *args, **kwargs): ...
    def download_and_append_fragments(self, ctx, fragments, info_dict, *, is_fatal=..., pack_func=..., finish_func=None, tpe=None, interrupt_trigger=(True,)): ...
