import contextlib
import http.cookiejar
import http.cookies
from .aes import aes_cbc_decrypt_bytes as aes_cbc_decrypt_bytes, aes_gcm_decrypt_and_verify_bytes as aes_gcm_decrypt_and_verify_bytes, unpad_pkcs7 as unpad_pkcs7
from .dependencies import secretstorage as secretstorage, sqlite3 as sqlite3
from .minicurses import MultilinePrinter as MultilinePrinter, QuietMultilinePrinter as QuietMultilinePrinter
from .utils import DownloadError as DownloadError, Popen as Popen, YoutubeDLError as YoutubeDLError, error_to_str as error_to_str, expand_path as expand_path, is_path_like as is_path_like, sanitize_url as sanitize_url, str_or_none as str_or_none, try_call as try_call, write_string as write_string
from .utils._utils import _YDLLogger
from .utils.networking import normalize_url as normalize_url
from _typeshed import Incomplete
from collections.abc import Generator
from enum import Enum
from typing import NamedTuple

CHROMIUM_BASED_BROWSERS: Incomplete
SUPPORTED_BROWSERS: Incomplete

class YDLLogger(_YDLLogger):
    def warning(self, message, only_once: bool = False): ...
    class ProgressBar(MultilinePrinter):
        def print(self, message) -> None: ...
    def progress_bar(self): ...

class CookieLoadError(YoutubeDLError): ...

def load_cookies(cookie_file, browser_specification, ydl): ...
def extract_cookies_from_browser(browser_name, profile=None, logger=..., *, keyring=None, container=None): ...

class ChromeCookieDecryptor:
    def decrypt(self, encrypted_value) -> None: ...

def get_cookie_decryptor(browser_root, browser_keyring_name, logger, *, keyring=None, meta_version=None): ...

class LinuxChromeCookieDecryptor(ChromeCookieDecryptor):
    def __init__(self, browser_keyring_name, logger, *, keyring=None, meta_version=None) -> None: ...
    @staticmethod
    def derive_key(password): ...
    def decrypt(self, encrypted_value): ...

class MacChromeCookieDecryptor(ChromeCookieDecryptor):
    def __init__(self, browser_keyring_name, logger, meta_version=None) -> None: ...
    @staticmethod
    def derive_key(password): ...
    def decrypt(self, encrypted_value): ...

class WindowsChromeCookieDecryptor(ChromeCookieDecryptor):
    def __init__(self, browser_root, logger, meta_version=None) -> None: ...
    def decrypt(self, encrypted_value): ...

class ParserError(Exception): ...

class DataParser:
    cursor: int
    def __init__(self, data, logger) -> None: ...
    def read_bytes(self, num_bytes): ...
    def expect_bytes(self, expected_value, message) -> None: ...
    def read_uint(self, big_endian: bool = False): ...
    def read_double(self, big_endian: bool = False): ...
    def read_cstring(self): ...
    def skip(self, num_bytes, description: str = 'unknown') -> None: ...
    def skip_to(self, offset, description: str = 'unknown') -> None: ...
    def skip_to_end(self, description: str = 'unknown') -> None: ...

def parse_safari_cookies(data, jar=None, logger=...): ...

class _LinuxDesktopEnvironment(Enum):
    OTHER = ...
    CINNAMON = ...
    DEEPIN = ...
    GNOME = ...
    KDE3 = ...
    KDE4 = ...
    KDE5 = ...
    KDE6 = ...
    PANTHEON = ...
    UKUI = ...
    UNITY = ...
    XFCE = ...
    LXQT = ...

class _LinuxKeyring(Enum):
    KWALLET = ...
    KWALLET5 = ...
    KWALLET6 = ...
    GNOMEKEYRING = ...
    BASICTEXT = ...

SUPPORTED_KEYRINGS: Incomplete

def pbkdf2_sha1(password, salt, iterations, key_length): ...

class LenientSimpleCookie(http.cookies.SimpleCookie):
    def load(self, data): ...

class YoutubeDLCookieJar(http.cookiejar.MozillaCookieJar):

    class _CookieFileEntry(NamedTuple):
        domain_name: Incomplete
        include_subdomains: Incomplete
        path: Incomplete
        https_only: Incomplete
        expires_at: Incomplete
        name: Incomplete
        value: Incomplete
    filename: Incomplete
    def __init__(self, filename=None, *args, **kwargs) -> None: ...
    @contextlib.contextmanager
    def open(self, file, *, write: bool = False) -> Generator[Incomplete]: ...
    def save(self, filename=None, ignore_discard: bool = True, ignore_expires: bool = True) -> None: ...
    def load(self, filename=None, ignore_discard: bool = True, ignore_expires: bool = True): ...
    def get_cookie_header(self, url): ...
    def get_cookies_for_url(self, url): ...
    def clear(self, *args, **kwargs): ...
