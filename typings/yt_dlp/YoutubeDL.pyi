import functools
import types
from .cache import Cache as Cache
from .compat import urllib as urllib, urllib_req_to_req as urllib_req_to_req
from .cookies import CookieLoadError as CookieLoadError, LenientSimpleCookie as LenientSimpleCookie, load_cookies as load_cookies
from .downloader import FFmpegFD as FFmpegFD, get_suitable_downloader as get_suitable_downloader, shorten_protocol_name as shorten_protocol_name
from .downloader.rtmp import rtmpdump_version as rtmpdump_version
from .extractor import gen_extractor_classes as gen_extractor_classes, get_info_extractor as get_info_extractor, import_extractors as import_extractors
from .extractor.common import UnsupportedURLIE as UnsupportedURLIE
from .extractor.openload import PhantomJSwrapper as PhantomJSwrapper
from .globals import IN_CLI as IN_CLI, LAZY_EXTRACTORS as LAZY_EXTRACTORS, all_plugins_loaded as all_plugins_loaded, plugin_dirs as plugin_dirs, plugin_ies as plugin_ies, plugin_ies_overrides as plugin_ies_overrides, plugin_pps as plugin_pps
from .minicurses import format_text as format_text
from .networking import HEADRequest as HEADRequest, Request as Request, RequestDirector as RequestDirector
from .networking.exceptions import HTTPError as HTTPError, NoSupportingHandlers as NoSupportingHandlers, RequestError as RequestError, SSLError as SSLError, network_exceptions as network_exceptions
from .networking.impersonate import ImpersonateRequestHandler as ImpersonateRequestHandler
from .plugins import load_all_plugins as load_all_plugins
from .postprocessor import EmbedThumbnailPP as EmbedThumbnailPP, FFmpegFixupDuplicateMoovPP as FFmpegFixupDuplicateMoovPP, FFmpegFixupDurationPP as FFmpegFixupDurationPP, FFmpegFixupM3u8PP as FFmpegFixupM3u8PP, FFmpegFixupM4aPP as FFmpegFixupM4aPP, FFmpegFixupStretchedPP as FFmpegFixupStretchedPP, FFmpegFixupTimestampPP as FFmpegFixupTimestampPP, FFmpegMergerPP as FFmpegMergerPP, FFmpegPostProcessor as FFmpegPostProcessor, FFmpegVideoConvertorPP as FFmpegVideoConvertorPP, MoveFilesAfterDownloadPP as MoveFilesAfterDownloadPP, get_postprocessor as get_postprocessor
from .update import REPOSITORY as REPOSITORY, current_git_head as current_git_head, detect_variant as detect_variant
from .utils import ContentTooShortError as ContentTooShortError, DEFAULT_OUTTMPL as DEFAULT_OUTTMPL, DateRange as DateRange, DownloadCancelled as DownloadCancelled, DownloadError as DownloadError, EntryNotInPlaylist as EntryNotInPlaylist, ExistingVideoReached as ExistingVideoReached, ExtractorError as ExtractorError, FormatSorter as FormatSorter, GeoRestrictedError as GeoRestrictedError, IDENTITY as IDENTITY, ISO3166Utils as ISO3166Utils, LINK_TEMPLATES as LINK_TEMPLATES, LazyList as LazyList, MEDIA_EXTENSIONS as MEDIA_EXTENSIONS, MaxDownloadsReached as MaxDownloadsReached, NO_DEFAULT as NO_DEFAULT, NUMBER_RE as NUMBER_RE, Namespace as Namespace, OUTTMPL_TYPES as OUTTMPL_TYPES, POSTPROCESS_WHEN as POSTPROCESS_WHEN, PagedList as PagedList, PlaylistEntries as PlaylistEntries, Popen as Popen, PostProcessingError as PostProcessingError, ReExtractInfo as ReExtractInfo, RejectedVideoReached as RejectedVideoReached, STR_FORMAT_RE_TMPL as STR_FORMAT_RE_TMPL, STR_FORMAT_TYPES as STR_FORMAT_TYPES, SameFileError as SameFileError, UnavailableVideoError as UnavailableVideoError, UserNotLive as UserNotLive, YoutubeDLError as YoutubeDLError, age_restricted as age_restricted, bug_reports_message as bug_reports_message, date_from_str as date_from_str, deprecation_warning as deprecation_warning, determine_ext as determine_ext, determine_protocol as determine_protocol, encode_compat_str as encode_compat_str, escapeHTML as escapeHTML, expand_path as expand_path, extract_basic_auth as extract_basic_auth, filesize_from_tbr as filesize_from_tbr, filter_dict as filter_dict, float_or_none as float_or_none, formatSeconds as formatSeconds, format_bytes as format_bytes, format_decimal_suffix as format_decimal_suffix, format_field as format_field, get_compatible_ext as get_compatible_ext, get_domain as get_domain, int_or_none as int_or_none, iri_to_uri as iri_to_uri, is_path_like as is_path_like, join_nonempty as join_nonempty, locked_file as locked_file, make_archive_id as make_archive_id, make_dir as make_dir, number_of_digits as number_of_digits, orderedSet as orderedSet, orderedSet_from_options as orderedSet_from_options, parse_filesize as parse_filesize, preferredencoding as preferredencoding, prepend_extension as prepend_extension, remove_terminal_sequences as remove_terminal_sequences, render_table as render_table, replace_extension as replace_extension, sanitize_filename as sanitize_filename, sanitize_path as sanitize_path, sanitize_url as sanitize_url, shell_quote as shell_quote, str_or_none as str_or_none, strftime_or_none as strftime_or_none, subtitles_filename as subtitles_filename, supports_terminal_sequences as supports_terminal_sequences, system_identifier as system_identifier, timetuple_from_msec as timetuple_from_msec, to_high_limit_path as to_high_limit_path, traverse_obj as traverse_obj, try_call as try_call, try_get as try_get, url_basename as url_basename, variadic as variadic, windows_enable_vt_mode as windows_enable_vt_mode, write_json_file as write_json_file, write_string as write_string
from .utils.networking import HTTPHeaderDict as HTTPHeaderDict, clean_headers as clean_headers, clean_proxies as clean_proxies, std_headers as std_headers
from .version import CHANNEL as CHANNEL, ORIGIN as ORIGIN, RELEASE_GIT_HEAD as RELEASE_GIT_HEAD, VARIANT as VARIANT, __version__ as __version__
from _typeshed import Incomplete

class YoutubeDL:
    params: Incomplete
    cache: Incomplete
    format_selector: Incomplete
    archive: Incomplete
    def __init__(self, params=None, auto_init: bool = True) -> None: ...
    def warn_if_short_id(self, argv) -> None: ...
    def add_info_extractor(self, ie) -> None: ...
    def get_info_extractor(self, ie_key): ...
    def add_default_info_extractors(self) -> None: ...
    def add_post_processor(self, pp, when: str = 'post_process') -> None: ...
    def add_post_hook(self, ph) -> None: ...
    def add_close_hook(self, ch) -> None: ...
    def add_progress_hook(self, ph) -> None: ...
    def add_postprocessor_hook(self, ph) -> None: ...
    def to_stdout(self, message, skip_eol: bool = False, quiet=None) -> None: ...
    def to_screen(self, message, skip_eol: bool = False, quiet=None, only_once: bool = False) -> None: ...
    def to_stderr(self, message, only_once: bool = False) -> None: ...
    def to_console_title(self, message=None, progress_state=None, percent=None) -> None: ...
    def save_console_title(self) -> None: ...
    def restore_console_title(self) -> None: ...
    def __enter__(self): ...
    def save_cookies(self) -> None: ...
    def __exit__(self, *args) -> None: ...
    def close(self) -> None: ...
    def trouble(self, message=None, tb=None, is_error: bool = True) -> None: ...
    Styles: Incomplete
    def report_warning(self, message, only_once: bool = False) -> None: ...
    def deprecation_warning(self, message, *, stacklevel: int = 0) -> None: ...
    def deprecated_feature(self, message) -> None: ...
    def report_error(self, message, *args, **kwargs) -> None: ...
    def write_debug(self, message, only_once: bool = False) -> None: ...
    def report_file_already_downloaded(self, file_name) -> None: ...
    def report_file_delete(self, file_name) -> None: ...
    def raise_no_formats(self, info, forced: bool = False, *, msg=None) -> None: ...
    def parse_outtmpl(self): ...
    def get_output_path(self, dir_type: str = '', filename=None): ...
    @staticmethod
    def escape_outtmpl(outtmpl): ...
    @classmethod
    def validate_outtmpl(cls, outtmpl): ...
    def prepare_outtmpl(self, outtmpl, info_dict, sanitize: bool = False): ...
    def evaluate_outtmpl(self, outtmpl, info_dict, *args, **kwargs): ...
    def prepare_filename(self, info_dict, dir_type: str = '', *, outtmpl=None, warn: bool = False): ...
    @staticmethod
    def add_extra_info(info_dict, extra_info) -> None: ...
    def extract_info(self, url, download: bool = True, ie_key=None, extra_info=None, process: bool = True, force_generic_extractor: bool = False): ...
    def add_default_extra_info(self, ie_result, ie, url) -> None: ...
    def process_ie_result(self, ie_result, download: bool = True, extra_info=None): ...
    tokens: Incomplete
    counter: int
    def build_format_selector(self, format_spec): ...
    def sort_formats(self, info_dict) -> None: ...
    def process_video_result(self, info_dict, download: bool = True): ...
    def process_subtitles(self, video_id, normal_subtitles, automatic_captions): ...
    def dl(self, name, info, subtitle: bool = False, test: bool = False): ...
    def existing_file(self, filepaths, *, default_overwrite: bool = True): ...
    @_catch_unsafe_extension_error
    def process_info(self, info_dict): ...
    def download(self, url_list): ...
    def download_with_info_file(self, info_filename): ...
    @staticmethod
    def sanitize_info(info_dict, remove_private_keys: bool = False): ...
    @staticmethod
    def filter_requested_info(info_dict, actually_filter: bool = True): ...
    @staticmethod
    def post_extract(info_dict) -> None: ...
    def run_pp(self, pp, infodict): ...
    def run_all_pps(self, key, info, *, additional_pps=None): ...
    def pre_process(self, ie_info, key: str = 'pre_process', files_to_move=None): ...
    def post_process(self, filename, info, files_to_move=None): ...
    def in_download_archive(self, info_dict): ...
    def record_download_archive(self, info_dict) -> None: ...
    @staticmethod
    def format_resolution(format, default: str = 'unknown'): ...
    def render_formats_table(self, info_dict): ...
    def render_thumbnails_table(self, info_dict): ...
    def render_subtitles_table(self, video_id, subtitles): ...
    def list_formats(self, info_dict) -> None: ...
    def list_thumbnails(self, info_dict) -> None: ...
    def list_subtitles(self, video_id, subtitles, name: str = 'subtitles') -> None: ...
    def print_debug_header(self): ...
    @functools.cached_property
    def proxies(self): ...
    @functools.cached_property
    def cookiejar(self): ...
    def urlopen(self, req): ...
    def build_request_director(self, handlers, preferences=None): ...
    def encode(self, s): ...
    def get_encoding(self): ...
