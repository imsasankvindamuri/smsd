import types
from .utils import supports_terminal_sequences as supports_terminal_sequences, write_string as write_string
from _typeshed import Incomplete

CONTROL_SEQUENCES: Incomplete

def format_text(text, f): ...

class MultilinePrinterBase:
    stream: Incomplete
    maximum: Incomplete
    def __init__(self, stream=None, lines: int = 1) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def print_at_line(self, text, pos) -> None: ...
    def end(self) -> None: ...
    def write(self, *text) -> None: ...

class QuietMultilinePrinter(MultilinePrinterBase): ...

class MultilineLogger(MultilinePrinterBase):
    def write(self, *text) -> None: ...
    def print_at_line(self, text, pos) -> None: ...

class BreaklineStatusPrinter(MultilinePrinterBase):
    def print_at_line(self, text, pos) -> None: ...

class MultilinePrinter(MultilinePrinterBase):
    preserve_output: Incomplete
    def __init__(self, stream=None, lines: int = 1, preserve_output: bool = True) -> None: ...
    def lock(func): ...
    @lock
    def print_at_line(self, text, pos) -> None: ...
    @lock
    def end(self) -> None: ...
