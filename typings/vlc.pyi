import ctypes
from _typeshed import Incomplete

logger: Incomplete
__version__: str
__libvlc_version__: str
__generator_version__: str
build_date: str
DEFAULT_ENCODING: str

def str_to_bytes(s): ...
def bytes_to_str(b): ...
def len_args(func): ...
def find_lib(): ...

dll: Incomplete
plugin_path: Incomplete

class VLCException(Exception): ...

class memoize_parameterless:
    func: Incomplete
    def __init__(self, func) -> None: ...
    def __call__(self, obj): ...
    def __get__(self, obj, objtype): ...

def get_default_instance(): ...
def try_fspath(path): ...

class _Cstruct(ctypes.Structure): ...

class _Ctype:
    @staticmethod
    def from_param(this): ...

class ListPOINTER:
    etype: Incomplete
    def __init__(self, etype) -> None: ...
    def from_param(self, param): ...

def string_result(result, func, arguments): ...
def class_result(classname): ...

class Log(ctypes.Structure): ...

Log_ptr: Incomplete

class MediaThumbnailRequest:
    def __new__(cls, *args): ...

class FILE(ctypes.Structure): ...

FILE_ptr: Incomplete
PyFile_FromFd: Incomplete
PyFile_AsFd: Incomplete

def module_description_list(head): ...
def track_description_list(head): ...

class _Enum(ctypes.c_uint):
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class AudioEqualizer(_Ctype):
    def __new__(cls, *args): ...
    def get_amp_at_index(self, u_band): ...
    def get_preamp(self): ...
    def release(self): ...
    def set_amp_at_index(self, f_amp, u_band): ...
    def set_preamp(self, f_preamp): ...

class EventManager(_Ctype):
    def __new__(cls, ptr=...): ...
    def event_attach(self, eventtype, callback, *args, **kwds): ...
    def event_detach(self, eventtype) -> None: ...

class Instance(_Ctype):
    def __new__(cls, *args): ...
    def media_player_new(self, uri: Incomplete | None = None): ...
    def media_list_player_new(self) -> "MediaListPlayer": ...
    def media_new(self, mrl, *options): ...
    def media_new_path(self, path): ...
    def media_list_new(self, mrls: Incomplete | None = None): ...
    def audio_output_enumerate_devices(self): ...
    def audio_filter_list_get(self): ...
    def video_filter_list_get(self): ...
    def add_intf(self, name): ...
    def audio_output_device_count(self, psz_audio_output): ...
    def audio_output_device_id(self, psz_audio_output, i_device): ...
    def audio_output_device_list_get(self, aout): ...
    def audio_output_device_longname(self, psz_output, i_device): ...
    def audio_output_list_get(self): ...
    def dialog_set_callbacks(self, p_cbs, p_data): ...
    def get_log_verbosity(self): ...
    def log_open(self): ...
    def log_set(self, cb, data): ...
    def log_set_file(self, stream): ...
    def log_unset(self): ...
    def media_discoverer_list_get(self, i_cat, ppp_services): ...
    def media_discoverer_new(self, psz_name): ...
    def media_discoverer_new_from_name(self, psz_name): ...
    def media_library_new(self): ...
    def media_new_as_node(self, psz_name): ...
    def media_new_callbacks(self, open_cb, read_cb, seek_cb, close_cb, opaque): ...
    def media_new_fd(self, fd): ...
    def media_new_location(self, psz_mrl): ...
    def playlist_play(self, i_id, i_options, ppsz_options): ...
    def release(self): ...
    def renderer_discoverer_list_get(self, ppp_services): ...
    def renderer_discoverer_new(self, psz_name): ...
    def retain(self): ...
    def set_app_id(self, id, version, icon): ...
    def set_exit_handler(self, cb, opaque): ...
    def set_log_verbosity(self, level): ...
    def set_user_agent(self, name, http): ...
    def vlm_add_broadcast(self, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop): ...
    def vlm_add_input(self, psz_name, psz_input): ...
    def vlm_add_vod(self, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux): ...
    def vlm_change_media(self, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop): ...
    def vlm_del_media(self, psz_name): ...
    def vlm_get_event_manager(self): ...
    def vlm_get_media_instance_length(self, psz_name, i_instance): ...
    def vlm_get_media_instance_position(self, psz_name, i_instance): ...
    def vlm_get_media_instance_rate(self, psz_name, i_instance): ...
    def vlm_get_media_instance_time(self, psz_name, i_instance): ...
    def vlm_pause_media(self, psz_name): ...
    def vlm_play_media(self, psz_name): ...
    def vlm_release(self): ...
    def vlm_seek_media(self, psz_name, f_percentage): ...
    def vlm_set_enabled(self, psz_name, b_enabled): ...
    def vlm_set_input(self, psz_name, psz_input): ...
    def vlm_set_loop(self, psz_name, b_loop): ...
    def vlm_set_mux(self, psz_name, psz_mux): ...
    def vlm_set_output(self, psz_name, psz_output): ...
    def vlm_show_media(self, psz_name): ...
    def vlm_stop_media(self, psz_name): ...
    def wait(self): ...

class LogIterator(_Ctype):
    def __new__(cls, ptr=...): ...
    def __iter__(self): ...
    def next(self): ...
    def __next__(self): ...
    def free(self): ...
    def has_next(self): ...

class Media(_Ctype):
    def __new__(cls, *args): ...
    def get_instance(self): ...
    def add_options(self, *options) -> None: ...
    def tracks_get(self): ...
    def add_option(self, psz_options): ...
    def add_option_flag(self, psz_options, i_flags): ...
    def duplicate(self): ...
    def event_manager(self): ...
    def get_duration(self): ...
    def get_meta(self, e_meta): ...
    def get_mrl(self): ...
    def get_parsed_status(self): ...
    def get_state(self): ...
    def get_stats(self, p_stats): ...
    def get_tracks_info(self): ...
    def get_type(self): ...
    def get_user_data(self): ...
    def is_parsed(self): ...
    def parse(self): ...
    def parse_async(self): ...
    def parse_stop(self): ...
    def parse_with_options(self, parse_flag, timeout): ...
    def player_new_from_media(self): ...
    def release(self): ...
    def retain(self): ...
    def save_meta(self): ...
    def set_meta(self, e_meta, psz_value): ...
    def set_user_data(self, p_new_user_data): ...
    def slaves_add(self, i_type, i_priority, psz_uri): ...
    def slaves_clear(self): ...
    def slaves_get(self, ppp_slaves): ...
    def subitems(self): ...

class MediaDiscoverer(_Ctype):
    def __new__(cls, ptr=...): ...
    def event_manager(self): ...
    def is_running(self): ...
    def localized_name(self): ...
    def media_list(self): ...
    def release(self): ...
    def start(self): ...
    def stop(self): ...

class MediaLibrary(_Ctype):
    def __new__(cls, ptr=...): ...
    def load(self): ...
    def media_list(self): ...
    def release(self): ...
    def retain(self): ...

class MediaList(_Ctype):
    def __new__(cls, *args): ...
    def get_instance(self): ...
    def add_media(self, mrl): ...
    def count(self) -> int: ...
    def __len__(self) -> int: ...
    def event_manager(self): ...
    def index_of_item(self, p_md): ...
    def insert_media(self, p_md, i_pos): ...
    def is_readonly(self): ...
    def item_at_index(self, i_pos): ...
    def __getitem__(self, i): ...
    def __iter__(self): ...
    def lock(self): ...
    def media(self): ...
    def release(self): ...
    def remove_index(self, i_pos): ...
    def retain(self): ...
    def set_media(self, p_md): ...
    def unlock(self): ...

class MediaListPlayer(_Ctype):
    def __new__(cls, arg: Incomplete | None = None): ...
    def get_instance(self): ...
    def event_manager(self): ...
    def get_media_player(self) -> MediaPlayer: ...
    def get_state(self): ...
    def is_playing(self): ...
    def next(self): ...
    def pause(self): ...
    def play(self): ...
    def play_item(self, p_md): ...
    def play_item_at_index(self, i_index): ...
    def __getitem__(self, i): ...
    def __iter__(self): ...
    def previous(self): ...
    def release(self): ...
    def retain(self): ...
    def set_media_list(self, p_mlist): ...
    def set_media_player(self, p_mi): ...
    def set_pause(self, do_pause): ...
    def set_playback_mode(self, e_mode): ...
    def stop(self): ...

class MediaPlayer(_Ctype):
    def __new__(cls, *args): ...
    def get_instance(self): ...
    def set_mrl(self, mrl, *options): ...
    def video_get_spu_description(self): ...
    def video_get_track_description(self): ...
    def audio_get_track_description(self): ...
    def get_full_title_descriptions(self): ...
    def get_full_chapter_descriptions(self, i_chapters_of_title): ...
    def video_get_size(self, num: int = 0): ...
    def set_hwnd(self, drawable) -> None: ...
    def video_get_width(self, num: int = 0): ...
    def video_get_height(self, num: int = 0): ...
    def video_get_cursor(self, num: int = 0): ...
    def audio_get_channel(self): ...
    def audio_get_delay(self): ...
    def audio_get_mute(self): ...
    def audio_get_track(self): ...
    def audio_get_track_count(self): ...
    def audio_get_volume(self): ...
    def audio_output_device_enum(self): ...
    def audio_output_device_get(self): ...
    def audio_output_device_set(self, module, device_id): ...
    def audio_output_get_device_type(self): ...
    def audio_output_set(self, psz_name): ...
    def audio_output_set_device_type(self, device_type): ...
    def audio_set_callbacks(self, play, pause, resume, flush, drain, opaque): ...
    def audio_set_channel(self, channel): ...
    def audio_set_delay(self, i_delay): ...
    def audio_set_format(self, format, rate, channels): ...
    def audio_set_format_callbacks(self, setup, cleanup): ...
    def audio_set_mute(self, status): ...
    def audio_set_track(self, i_track): ...
    def audio_set_volume(self, i_volume): ...
    def audio_set_volume_callback(self, set_volume): ...
    def audio_toggle_mute(self): ...
    def get_fullscreen(self): ...
    def add_slave(self, i_type, psz_uri, b_select): ...
    def can_pause(self): ...
    def event_manager(self): ...
    def get_agl(self): ...
    def get_chapter(self): ...
    def get_chapter_count(self): ...
    def get_chapter_count_for_title(self, i_title): ...
    def get_fps(self): ...
    def get_hwnd(self): ...
    def get_length(self): ...
    def get_media(self): ...
    def get_nsobject(self): ...
    def get_position(self): ...
    def get_rate(self): ...
    def get_role(self): ...
    def get_state(self): ...
    def get_time(self): ...
    def get_title(self): ...
    def get_title_count(self): ...
    def get_xwindow(self): ...
    def has_vout(self): ...
    def is_playing(self): ...
    def is_seekable(self): ...
    def navigate(self, navigate): ...
    def next_chapter(self): ...
    def next_frame(self): ...
    def pause(self): ...
    def play(self): ...
    def previous_chapter(self): ...
    def program_scrambled(self): ...
    def release(self): ...
    def retain(self): ...
    def set_agl(self, drawable): ...
    def set_android_context(self, p_awindow_handler): ...
    def set_chapter(self, i_chapter): ...
    def set_equalizer(self, p_equalizer): ...
    def set_evas_object(self, p_evas_object): ...
    def set_media(self, p_md): ...
    def set_nsobject(self, drawable): ...
    def set_pause(self, do_pause): ...
    def set_position(self, f_pos): ...
    def set_rate(self, rate): ...
    def set_renderer(self, p_item): ...
    def set_role(self, role): ...
    def set_time(self, i_time): ...
    def set_title(self, i_title): ...
    def set_video_title_display(self, position, timeout): ...
    def set_xwindow(self, drawable): ...
    def stop(self): ...
    def will_play(self): ...
    def set_fullscreen(self, b_fullscreen): ...
    def toggle_fullscreen(self): ...
    def toggle_teletext(self): ...
    def video_get_adjust_float(self, option): ...
    def video_get_adjust_int(self, option): ...
    def video_get_aspect_ratio(self): ...
    def video_get_chapter_description(self, i_title): ...
    def video_get_crop_geometry(self): ...
    def video_get_logo_int(self, option): ...
    def video_get_marquee_int(self, option): ...
    def video_get_marquee_string(self, option): ...
    def video_get_scale(self): ...
    def video_get_spu(self): ...
    def video_get_spu_count(self): ...
    def video_get_spu_delay(self): ...
    def video_get_teletext(self): ...
    def video_get_title_description(self): ...
    def video_get_track(self): ...
    def video_get_track_count(self): ...
    def video_set_adjust_float(self, option, value): ...
    def video_set_adjust_int(self, option, value): ...
    def video_set_aspect_ratio(self, psz_aspect): ...
    def video_set_callbacks(self, lock, unlock, display, opaque): ...
    def video_set_crop_geometry(self, psz_geometry): ...
    def video_set_deinterlace(self, psz_mode): ...
    def video_set_format(self, chroma, width, height, pitch): ...
    def video_set_format_callbacks(self, setup, cleanup): ...
    def video_set_key_input(self, on): ...
    def video_set_logo_int(self, option, value): ...
    def video_set_logo_string(self, option, psz_value): ...
    def video_set_marquee_int(self, option, i_val): ...
    def video_set_marquee_string(self, option, psz_text): ...
    def video_set_mouse_input(self, on): ...
    def video_set_scale(self, f_factor): ...
    def video_set_spu(self, i_spu): ...
    def video_set_spu_delay(self, i_delay): ...
    def video_set_subtitle_file(self, psz_subtitle): ...
    def video_set_teletext(self, i_page): ...
    def video_set_track(self, i_track): ...
    def video_take_snapshot(self, num, psz_filepath, i_width, i_height): ...
    def video_update_viewpoint(self, p_viewpoint, b_absolute): ...

class Renderer(_Ctype):
    def __new__(cls, ptr=...): ...
    def flags(self): ...
    def hold(self): ...
    def icon_uri(self): ...
    def name(self): ...
    def release(self): ...
    def type(self): ...

class RendererDiscoverer(_Ctype):
    def __new__(cls, ptr=...): ...
    def event_manager(self): ...
    def release(self): ...
    def start(self): ...
    def stop(self): ...

class AudioOutputChannel(_Enum): ...
class AudioOutputDeviceTypes(_Enum): ...
class DialogQuestionType(_Enum): ...
class EventType(_Enum): ...
class LogLevel(_Enum): ...
class MediaDiscovererCategory(_Enum): ...
class MediaParseFlag(_Enum): ...
class MediaParsedStatus(_Enum): ...
class MediaPlayerRole(_Enum): ...
class MediaSlaveType(_Enum): ...
class MediaType(_Enum): ...
class Meta(_Enum): ...
class NavigateMode(_Enum): ...
class PlaybackMode(_Enum): ...
class Position(_Enum): ...
class State(_Enum): ...
class TeletextKey(_Enum): ...
class TrackType(_Enum): ...
class VideoAdjustOption(_Enum): ...
class VideoLogoOption(_Enum): ...
class VideoMarqueeOption(_Enum): ...
class VideoOrient(_Enum): ...
class VideoProjection(_Enum): ...
class ModuleDescription(_Cstruct): ...
class RdDescription(_Cstruct): ...
class MediaStats(_Cstruct): ...

class MediaTrackInfo(_Cstruct):
    class U(ctypes.Union):
        class Audio(_Cstruct): ...
        class Video(_Cstruct): ...

class AudioTrack(_Cstruct): ...
class VideoViewpoint(_Cstruct): ...
class VideoTrack(_Cstruct): ...
class SubtitleTrack(_Cstruct): ...
class MediaTrack(_Cstruct): ...
class MediaSlave(_Cstruct): ...
class TrackDescription(_Cstruct): ...
class TitleDescription(_Cstruct): ...
class ChapterDescription(_Cstruct): ...
class AudioOutput(_Cstruct): ...
class AudioOutputDevice(_Cstruct): ...
class MediaDiscovererDescription(_Cstruct): ...

class Event(_Cstruct):
    class U(ctypes.Union):
        class MediaMetaChanged(_Cstruct): ...
        class MediaSubitemAdded(_Cstruct): ...
        class MediaDurationChanged(_Cstruct): ...
        class MediaParsedChanged(_Cstruct): ...
        class MediaFreed(_Cstruct): ...
        class MediaStateChanged(_Cstruct): ...
        class MediaSubitemtreeAdded(_Cstruct): ...
        class MediaPlayerBuffering(_Cstruct): ...
        class MediaPlayerChapterChanged(_Cstruct): ...
        class MediaPlayerPositionChanged(_Cstruct): ...
        class MediaPlayerTimeChanged(_Cstruct): ...
        class MediaPlayerTitleChanged(_Cstruct): ...
        class MediaPlayerSeekableChanged(_Cstruct): ...
        class MediaPlayerPausableChanged(_Cstruct): ...
        class MediaPlayerScrambledChanged(_Cstruct): ...
        class MediaPlayerVout(_Cstruct): ...
        class MediaListItemAdded(_Cstruct): ...
        class MediaListWillAddItem(_Cstruct): ...
        class MediaListItemDeleted(_Cstruct): ...
        class MediaListWillDeleteItem(_Cstruct): ...
        class MediaListPlayerNextItemSet(_Cstruct): ...
        class MediaPlayerSnapshotTaken(_Cstruct): ...
        class MediaPlayerLengthChanged(_Cstruct): ...
        class VlmMediaEvent(_Cstruct): ...
        class MediaPlayerMediaChanged(_Cstruct): ...
        class MediaPlayerEsChanged(_Cstruct): ...
        class MediaPlayerAudioVolume(_Cstruct): ...
        class MediaPlayerAudioDevice(_Cstruct): ...
        class RendererDiscovererItemAdded(_Cstruct): ...
        class RendererDiscovererItemDeleted(_Cstruct): ...

class EventUnion(ctypes.Union): ...

class DialogCbs(_Cstruct):
    PfDisplayError: Incomplete
    PfDisplayLogin: Incomplete
    PfDisplayQuestion: Incomplete
    PfDisplayProgress: Incomplete
    PfCancel: Incomplete
    PfUpdateProgress: Incomplete

class LogMessage(_Cstruct): ...
class AudioCleanupCb(ctypes.c_void_p): ...
class AudioDrainCb(ctypes.c_void_p): ...
class AudioFlushCb(ctypes.c_void_p): ...
class AudioPauseCb(ctypes.c_void_p): ...
class AudioPlayCb(ctypes.c_void_p): ...
class AudioResumeCb(ctypes.c_void_p): ...
class AudioSetVolumeCb(ctypes.c_void_p): ...
class AudioSetupCb(ctypes.c_void_p): ...
class Callback(ctypes.c_void_p): ...
class LogCb(ctypes.c_void_p): ...
class MediaCloseCb(ctypes.c_void_p): ...
class MediaOpenCb(ctypes.c_void_p): ...
class MediaReadCb(ctypes.c_void_p): ...
class MediaSeekCb(ctypes.c_void_p): ...
class VideoCleanupCb(ctypes.c_void_p): ...
class VideoDisplayCb(ctypes.c_void_p): ...
class VideoFormatCb(ctypes.c_void_p): ...
class VideoLockCb(ctypes.c_void_p): ...
class VideoUnlockCb(ctypes.c_void_p): ...

class CallbackDecorators:
    AudioCleanupCb: Incomplete
    AudioDrainCb: Incomplete
    AudioFlushCb: Incomplete
    AudioPauseCb: Incomplete
    AudioPlayCb: Incomplete
    AudioResumeCb: Incomplete
    AudioSetVolumeCb: Incomplete
    AudioSetupCb: Incomplete
    Callback: Incomplete
    LogCb: Incomplete
    MediaCloseCb: Incomplete
    MediaOpenCb: Incomplete
    MediaReadCb: Incomplete
    MediaSeekCb: Incomplete
    VideoCleanupCb: Incomplete
    VideoDisplayCb: Incomplete
    VideoFormatCb: Incomplete
    VideoLockCb: Incomplete
    VideoUnlockCb: Incomplete
cb = CallbackDecorators

def libvlc_add_intf(p_instance, name): ...
def libvlc_audio_equalizer_get_amp_at_index(p_equalizer, u_band): ...
def libvlc_audio_equalizer_get_band_count(): ...
def libvlc_audio_equalizer_get_band_frequency(u_index): ...
def libvlc_audio_equalizer_get_preamp(p_equalizer): ...
def libvlc_audio_equalizer_get_preset_count(): ...
def libvlc_audio_equalizer_get_preset_name(u_index): ...
def libvlc_audio_equalizer_new(): ...
def libvlc_audio_equalizer_new_from_preset(u_index): ...
def libvlc_audio_equalizer_release(p_equalizer): ...
def libvlc_audio_equalizer_set_amp_at_index(p_equalizer, f_amp, u_band): ...
def libvlc_audio_equalizer_set_preamp(p_equalizer, f_preamp): ...
def libvlc_audio_filter_list_get(p_instance): ...
def libvlc_audio_get_channel(p_mi): ...
def libvlc_audio_get_delay(p_mi): ...
def libvlc_audio_get_mute(p_mi): ...
def libvlc_audio_get_track(p_mi): ...
def libvlc_audio_get_track_count(p_mi): ...
def libvlc_audio_get_track_description(p_mi): ...
def libvlc_audio_get_volume(p_mi): ...
def libvlc_audio_output_device_count(p_instance, psz_audio_output): ...
def libvlc_audio_output_device_enum(mp): ...
def libvlc_audio_output_device_get(mp): ...
def libvlc_audio_output_device_id(p_instance, psz_audio_output, i_device): ...
def libvlc_audio_output_device_list_get(p_instance, aout): ...
def libvlc_audio_output_device_list_release(p_list): ...
def libvlc_audio_output_device_longname(p_instance, psz_output, i_device): ...
def libvlc_audio_output_device_set(mp, module, device_id): ...
def libvlc_audio_output_get_device_type(p_mi): ...
def libvlc_audio_output_list_get(p_instance): ...
def libvlc_audio_output_list_release(p_list): ...
def libvlc_audio_output_set(p_mi, psz_name): ...
def libvlc_audio_output_set_device_type(p_mp, device_type): ...
def libvlc_audio_set_callbacks(mp, play, pause, resume, flush, drain, opaque): ...
def libvlc_audio_set_channel(p_mi, channel): ...
def libvlc_audio_set_delay(p_mi, i_delay): ...
def libvlc_audio_set_format(mp, format, rate, channels): ...
def libvlc_audio_set_format_callbacks(mp, setup, cleanup): ...
def libvlc_audio_set_mute(p_mi, status): ...
def libvlc_audio_set_track(p_mi, i_track): ...
def libvlc_audio_set_volume(p_mi, i_volume): ...
def libvlc_audio_set_volume_callback(mp, set_volume): ...
def libvlc_audio_toggle_mute(p_mi): ...
def libvlc_chapter_descriptions_release(p_chapters, i_count): ...
def libvlc_clearerr(): ...
def libvlc_clock(): ...
def libvlc_dialog_dismiss(p_id): ...
def libvlc_dialog_get_context(p_id): ...
def libvlc_dialog_post_action(p_id, i_action): ...
def libvlc_dialog_post_login(p_id, psz_username, psz_password, b_store): ...
def libvlc_dialog_set_callbacks(p_instance, p_cbs, p_data): ...
def libvlc_dialog_set_context(p_id, p_context): ...
def libvlc_errmsg(): ...
def libvlc_event_attach(p_event_manager, i_event_type, f_callback, user_data): ...
def libvlc_event_detach(p_event_manager, i_event_type, f_callback, p_user_data): ...
def libvlc_event_type_name(event_type): ...
def libvlc_free(ptr): ...
def libvlc_get_changeset(): ...
def libvlc_get_compiler(): ...
def libvlc_get_fullscreen(p_mi): ...
def libvlc_get_log_verbosity(p_instance): ...
def libvlc_get_version(): ...
def libvlc_log_clear(p_log): ...
def libvlc_log_close(p_log): ...
def libvlc_log_count(p_log): ...
def libvlc_log_get_context(ctx, module, file): ...
def libvlc_log_get_iterator(p_log): ...
def libvlc_log_get_object(ctx, name, header, id): ...
def libvlc_log_iterator_free(p_iter): ...
def libvlc_log_iterator_has_next(p_iter): ...
def libvlc_log_iterator_next(p_iter, p_buf): ...
def libvlc_log_open(p_instance): ...
def libvlc_log_set(p_instance, cb, data): ...
def libvlc_log_set_file(p_instance, stream): ...
def libvlc_log_unset(p_instance): ...
def libvlc_media_add_option(p_md, psz_options): ...
def libvlc_media_add_option_flag(p_md, psz_options, i_flags): ...
def libvlc_media_discoverer_event_manager(p_mdis): ...
def libvlc_media_discoverer_is_running(p_mdis): ...
def libvlc_media_discoverer_list_get(p_inst, i_cat, ppp_services): ...
def libvlc_media_discoverer_list_release(pp_services, i_count): ...
def libvlc_media_discoverer_localized_name(p_mdis): ...
def libvlc_media_discoverer_media_list(p_mdis): ...
def libvlc_media_discoverer_new(p_inst, psz_name): ...
def libvlc_media_discoverer_new_from_name(p_inst, psz_name): ...
def libvlc_media_discoverer_release(p_mdis): ...
def libvlc_media_discoverer_start(p_mdis): ...
def libvlc_media_discoverer_stop(p_mdis): ...
def libvlc_media_duplicate(p_md): ...
def libvlc_media_event_manager(p_md): ...
def libvlc_media_get_codec_description(i_type, i_codec): ...
def libvlc_media_get_duration(p_md): ...
def libvlc_media_get_meta(p_md, e_meta): ...
def libvlc_media_get_mrl(p_md): ...
def libvlc_media_get_parsed_status(p_md): ...
def libvlc_media_get_state(p_md): ...
def libvlc_media_get_stats(p_md, p_stats): ...
def libvlc_media_get_tracks_info(p_md): ...
def libvlc_media_get_type(p_md): ...
def libvlc_media_get_user_data(p_md): ...
def libvlc_media_is_parsed(p_md): ...
def libvlc_media_library_load(p_mlib): ...
def libvlc_media_library_media_list(p_mlib): ...
def libvlc_media_library_new(p_instance): ...
def libvlc_media_library_release(p_mlib): ...
def libvlc_media_library_retain(p_mlib): ...
def libvlc_media_list_add_media(p_ml, p_md): ...
def libvlc_media_list_count(p_ml): ...
def libvlc_media_list_event_manager(p_ml): ...
def libvlc_media_list_index_of_item(p_ml, p_md): ...
def libvlc_media_list_insert_media(p_ml, p_md, i_pos): ...
def libvlc_media_list_is_readonly(p_ml): ...
def libvlc_media_list_item_at_index(p_ml, i_pos): ...
def libvlc_media_list_lock(p_ml): ...
def libvlc_media_list_media(p_ml): ...
def libvlc_media_list_new(p_instance): ...
def libvlc_media_list_player_event_manager(p_mlp): ...
def libvlc_media_list_player_get_media_player(p_mlp): ...
def libvlc_media_list_player_get_state(p_mlp): ...
def libvlc_media_list_player_is_playing(p_mlp): ...
def libvlc_media_list_player_new(p_instance): ...
def libvlc_media_list_player_next(p_mlp): ...
def libvlc_media_list_player_pause(p_mlp): ...
def libvlc_media_list_player_play(p_mlp): ...
def libvlc_media_list_player_play_item(p_mlp, p_md): ...
def libvlc_media_list_player_play_item_at_index(p_mlp, i_index): ...
def libvlc_media_list_player_previous(p_mlp): ...
def libvlc_media_list_player_release(p_mlp): ...
def libvlc_media_list_player_retain(p_mlp): ...
def libvlc_media_list_player_set_media_list(p_mlp, p_mlist): ...
def libvlc_media_list_player_set_media_player(p_mlp, p_mi): ...
def libvlc_media_list_player_set_pause(p_mlp, do_pause): ...
def libvlc_media_list_player_set_playback_mode(p_mlp, e_mode): ...
def libvlc_media_list_player_stop(p_mlp): ...
def libvlc_media_list_release(p_ml): ...
def libvlc_media_list_remove_index(p_ml, i_pos): ...
def libvlc_media_list_retain(p_ml): ...
def libvlc_media_list_set_media(p_ml, p_md): ...
def libvlc_media_list_unlock(p_ml): ...
def libvlc_media_new_as_node(p_instance, psz_name): ...
def libvlc_media_new_callbacks(instance, open_cb, read_cb, seek_cb, close_cb, opaque): ...
def libvlc_media_new_fd(p_instance, fd): ...
def libvlc_media_new_location(p_instance, psz_mrl): ...
def libvlc_media_new_path(p_instance, path): ...
def libvlc_media_parse(p_md): ...
def libvlc_media_parse_async(p_md): ...
def libvlc_media_parse_stop(p_md): ...
def libvlc_media_parse_with_options(p_md, parse_flag, timeout): ...
def libvlc_media_player_add_slave(p_mi, i_type, psz_uri, b_select): ...
def libvlc_media_player_can_pause(p_mi): ...
def libvlc_media_player_event_manager(p_mi): ...
def libvlc_media_player_get_agl(p_mi): ...
def libvlc_media_player_get_chapter(p_mi): ...
def libvlc_media_player_get_chapter_count(p_mi): ...
def libvlc_media_player_get_chapter_count_for_title(p_mi, i_title): ...
def libvlc_media_player_get_fps(p_mi): ...
def libvlc_media_player_get_full_chapter_descriptions(p_mi, i_chapters_of_title, pp_chapters): ...
def libvlc_media_player_get_full_title_descriptions(p_mi, titles): ...
def libvlc_media_player_get_hwnd(p_mi): ...
def libvlc_media_player_get_length(p_mi): ...
def libvlc_media_player_get_media(p_mi): ...
def libvlc_media_player_get_nsobject(p_mi): ...
def libvlc_media_player_get_position(p_mi): ...
def libvlc_media_player_get_rate(p_mi): ...
def libvlc_media_player_get_role(p_mi): ...
def libvlc_media_player_get_state(p_mi): ...
def libvlc_media_player_get_time(p_mi): ...
def libvlc_media_player_get_title(p_mi): ...
def libvlc_media_player_get_title_count(p_mi): ...
def libvlc_media_player_get_xwindow(p_mi): ...
def libvlc_media_player_has_vout(p_mi): ...
def libvlc_media_player_is_playing(p_mi): ...
def libvlc_media_player_is_seekable(p_mi): ...
def libvlc_media_player_navigate(p_mi, navigate): ...
def libvlc_media_player_new(p_libvlc_instance): ...
def libvlc_media_player_new_from_media(p_md): ...
def libvlc_media_player_next_chapter(p_mi): ...
def libvlc_media_player_next_frame(p_mi): ...
def libvlc_media_player_pause(p_mi): ...
def libvlc_media_player_play(p_mi): ...
def libvlc_media_player_previous_chapter(p_mi): ...
def libvlc_media_player_program_scrambled(p_mi): ...
def libvlc_media_player_release(p_mi): ...
def libvlc_media_player_retain(p_mi): ...
def libvlc_media_player_set_agl(p_mi, drawable): ...
def libvlc_media_player_set_android_context(p_mi, p_awindow_handler): ...
def libvlc_media_player_set_chapter(p_mi, i_chapter): ...
def libvlc_media_player_set_equalizer(p_mi, p_equalizer): ...
def libvlc_media_player_set_evas_object(p_mi, p_evas_object): ...
def libvlc_media_player_set_hwnd(p_mi, drawable): ...
def libvlc_media_player_set_media(p_mi, p_md): ...
def libvlc_media_player_set_nsobject(p_mi, drawable): ...
def libvlc_media_player_set_pause(mp, do_pause): ...
def libvlc_media_player_set_position(p_mi, f_pos): ...
def libvlc_media_player_set_rate(p_mi, rate): ...
def libvlc_media_player_set_renderer(p_mi, p_item): ...
def libvlc_media_player_set_role(p_mi, role): ...
def libvlc_media_player_set_time(p_mi, i_time): ...
def libvlc_media_player_set_title(p_mi, i_title): ...
def libvlc_media_player_set_video_title_display(p_mi, position, timeout): ...
def libvlc_media_player_set_xwindow(p_mi, drawable): ...
def libvlc_media_player_stop(p_mi): ...
def libvlc_media_player_will_play(p_mi): ...
def libvlc_media_release(p_md): ...
def libvlc_media_retain(p_md): ...
def libvlc_media_save_meta(p_md): ...
def libvlc_media_set_meta(p_md, e_meta, psz_value): ...
def libvlc_media_set_user_data(p_md, p_new_user_data): ...
def libvlc_media_slaves_add(p_md, i_type, i_priority, psz_uri): ...
def libvlc_media_slaves_clear(p_md): ...
def libvlc_media_slaves_get(p_md, ppp_slaves): ...
def libvlc_media_slaves_release(pp_slaves, i_count): ...
def libvlc_media_subitems(p_md): ...
def libvlc_media_tracks_get(p_md, tracks): ...
def libvlc_media_tracks_release(p_tracks, i_count): ...
def libvlc_module_description_list_release(p_list): ...
def libvlc_new(argc, argv): ...
def libvlc_playlist_play(p_instance, i_id, i_options, ppsz_options): ...
def libvlc_printerr(fmt): ...
def libvlc_release(p_instance): ...
def libvlc_renderer_discoverer_event_manager(p_rd): ...
def libvlc_renderer_discoverer_list_get(p_inst, ppp_services): ...
def libvlc_renderer_discoverer_list_release(pp_services, i_count): ...
def libvlc_renderer_discoverer_new(p_inst, psz_name): ...
def libvlc_renderer_discoverer_release(p_rd): ...
def libvlc_renderer_discoverer_start(p_rd): ...
def libvlc_renderer_discoverer_stop(p_rd): ...
def libvlc_renderer_item_flags(p_item): ...
def libvlc_renderer_item_hold(p_item): ...
def libvlc_renderer_item_icon_uri(p_item): ...
def libvlc_renderer_item_name(p_item): ...
def libvlc_renderer_item_release(p_item): ...
def libvlc_renderer_item_type(p_item): ...
def libvlc_retain(p_instance): ...
def libvlc_set_app_id(p_instance, id, version, icon): ...

LibvlcSetExitHandlerCb: Incomplete

def libvlc_set_exit_handler(p_instance, cb, opaque): ...
def libvlc_set_fullscreen(p_mi, b_fullscreen): ...
def libvlc_set_log_verbosity(p_instance, level): ...
def libvlc_set_user_agent(p_instance, name, http): ...
def libvlc_title_descriptions_release(p_titles, i_count): ...
def libvlc_toggle_fullscreen(p_mi): ...
def libvlc_toggle_teletext(p_mi): ...
def libvlc_track_description_list_release(p_track_description): ...
def libvlc_track_description_release(p_track_description): ...
def libvlc_video_filter_list_get(p_instance): ...
def libvlc_video_get_adjust_float(p_mi, option): ...
def libvlc_video_get_adjust_int(p_mi, option): ...
def libvlc_video_get_aspect_ratio(p_mi): ...
def libvlc_video_get_chapter_description(p_mi, i_title): ...
def libvlc_video_get_crop_geometry(p_mi): ...
def libvlc_video_get_cursor(p_mi, num): ...
def libvlc_video_get_height(p_mi): ...
def libvlc_video_get_logo_int(p_mi, option): ...
def libvlc_video_get_marquee_int(p_mi, option): ...
def libvlc_video_get_marquee_string(p_mi, option): ...
def libvlc_video_get_scale(p_mi): ...
def libvlc_video_get_size(p_mi, num): ...
def libvlc_video_get_spu(p_mi): ...
def libvlc_video_get_spu_count(p_mi): ...
def libvlc_video_get_spu_delay(p_mi): ...
def libvlc_video_get_spu_description(p_mi): ...
def libvlc_video_get_teletext(p_mi): ...
def libvlc_video_get_title_description(p_mi): ...
def libvlc_video_get_track(p_mi): ...
def libvlc_video_get_track_count(p_mi): ...
def libvlc_video_get_track_description(p_mi): ...
def libvlc_video_get_width(p_mi): ...
def libvlc_video_new_viewpoint(): ...
def libvlc_video_set_adjust_float(p_mi, option, value): ...
def libvlc_video_set_adjust_int(p_mi, option, value): ...
def libvlc_video_set_aspect_ratio(p_mi, psz_aspect): ...
def libvlc_video_set_callbacks(mp, lock, unlock, display, opaque): ...
def libvlc_video_set_crop_geometry(p_mi, psz_geometry): ...
def libvlc_video_set_deinterlace(p_mi, psz_mode): ...
def libvlc_video_set_format(mp, chroma, width, height, pitch): ...
def libvlc_video_set_format_callbacks(mp, setup, cleanup): ...
def libvlc_video_set_key_input(p_mi, on): ...
def libvlc_video_set_logo_int(p_mi, option, value): ...
def libvlc_video_set_logo_string(p_mi, option, psz_value): ...
def libvlc_video_set_marquee_int(p_mi, option, i_val): ...
def libvlc_video_set_marquee_string(p_mi, option, psz_text): ...
def libvlc_video_set_mouse_input(p_mi, on): ...
def libvlc_video_set_scale(p_mi, f_factor): ...
def libvlc_video_set_spu(p_mi, i_spu): ...
def libvlc_video_set_spu_delay(p_mi, i_delay): ...
def libvlc_video_set_subtitle_file(p_mi, psz_subtitle): ...
def libvlc_video_set_teletext(p_mi, i_page): ...
def libvlc_video_set_track(p_mi, i_track): ...
def libvlc_video_take_snapshot(p_mi, num, psz_filepath, i_width, i_height): ...
def libvlc_video_update_viewpoint(p_mi, p_viewpoint, b_absolute): ...
def libvlc_vlm_add_broadcast(p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop): ...
def libvlc_vlm_add_input(p_instance, psz_name, psz_input): ...
def libvlc_vlm_add_vod(p_instance, psz_name, psz_input, i_options, ppsz_options, b_enabled, psz_mux): ...
def libvlc_vlm_change_media(p_instance, psz_name, psz_input, psz_output, i_options, ppsz_options, b_enabled, b_loop): ...
def libvlc_vlm_del_media(p_instance, psz_name): ...
def libvlc_vlm_get_event_manager(p_instance): ...
def libvlc_vlm_get_media_instance_length(p_instance, psz_name, i_instance): ...
def libvlc_vlm_get_media_instance_position(p_instance, psz_name, i_instance): ...
def libvlc_vlm_get_media_instance_rate(p_instance, psz_name, i_instance): ...
def libvlc_vlm_get_media_instance_time(p_instance, psz_name, i_instance): ...
def libvlc_vlm_pause_media(p_instance, psz_name): ...
def libvlc_vlm_play_media(p_instance, psz_name): ...
def libvlc_vlm_release(p_instance): ...
def libvlc_vlm_seek_media(p_instance, psz_name, f_percentage): ...
def libvlc_vlm_set_enabled(p_instance, psz_name, b_enabled): ...
def libvlc_vlm_set_input(p_instance, psz_name, psz_input): ...
def libvlc_vlm_set_loop(p_instance, psz_name, b_loop): ...
def libvlc_vlm_set_mux(p_instance, psz_name, psz_mux): ...
def libvlc_vlm_set_output(p_instance, psz_name, psz_output): ...
def libvlc_vlm_show_media(p_instance, psz_name): ...
def libvlc_vlm_stop_media(p_instance, psz_name): ...
def libvlc_vprinterr(fmt, ap): ...
def libvlc_wait(p_instance): ...
def callbackmethod(callback): ...

libc_path: Incomplete
libc: Incomplete
libvlc_free: Incomplete

def hex_version(): ...
def libvlc_hex_version(): ...
def debug_callback(event, *args, **kwds) -> None: ...
def print_python() -> None: ...
def print_version() -> None: ...
